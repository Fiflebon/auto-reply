const snoowrap = require('snoowrap');
require('dotenv').config()

const r = new snoowrap({
    userAgent: process.env.USER_AGENT || 'default-user-agent',
    clientId: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET,
    refreshToken: process.env.REFRESH_TOKEN
});

const failedCommentIds = new Set();

const PUBLIC_REPLY = 'Verifie dans tes messages priv√©s';

let privateMessage = `Salut ! Je suis un bot et je voulais juste te dire que j'ai trouv√© ton commentaire int√©ressant ! Si tu veux discuter, n'h√©site pas √† me r√©pondre ici ou sur mon profil.`;
let doneReplyPM = `Super ! Merci d'avoir confirm√©. Si tu as d'autres questions, n'h√©site pas √† me r√©pondre.`;

// Fonctions pour mettre √† jour les messages
function setPrivateMessage(newMessage) {
    privateMessage = newMessage;
    console.log('‚úÖ Nouveau message priv√© standard d√©fini.');
}

function setDoneReplyMessage(newMessage) {
    doneReplyPM = newMessage;
    console.log('‚úÖ Nouveau message priv√© de r√©ponse au "done" d√©fini.');
}

// Cooldown global en cas de ratelimit
let cooldownUntil = null;

async function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function hasAlreadyReplied(comment, myUsername) {
    try {
        const replies = await comment.expandReplies({ depth: 1 });
        return replies.replies.some(reply =>
            reply.author && reply.author.name.toLowerCase() === myUsername.toLowerCase()
        );
    } catch (err) {
        console.error(`Erreur dans hasAlreadyReplied: ${err}`);
        return false;
    }
}

async function replyComment(comment, text) {
    try {
        await comment.reply(text);
        console.log(`R√©ponse publique envoy√©e √† ${comment.author.name}`);
        await delay(12000);
        return true;
    } catch (err) {
        if (err.message.includes('ratelimit')) {
            console.error('‚è∏Ô∏è Ratelimit d√©tect√©. Pause de 5 minutes.');
            cooldownUntil = Date.now() + 5 * 60 * 1000;
        } else {
            console.error(`Erreur lors de la r√©ponse publique (${comment.id}): ${err}`);
            failedCommentIds.add(comment.id); // üî∏ Marquer ce commentaire comme √©chou√©
        }
        return false;
    }
}

async function sendPrivateMessage(user, subject, text) {
    try {
        await r.composeMessage({
            to: user,
            subject,
            text
        });
        console.log(`MP envoy√© √† ${user}`);
        await delay(65000); // D√©lai entre les MP
    } catch (err) {
        if (err.message.includes('ratelimit')) {
            console.error('‚è∏Ô∏è Ratelimit d√©tect√© (MP). Pause de 5 minutes.');
            cooldownUntil = Date.now() + 5 * 60 * 1000;
        } else {
            console.error(`Erreur lors de l'envoi du MP : ${err}`);
        }
    }
}

async function processPostComments() {
    const myUsername = (await r.getMe()).name;
    console.log(`üîç Recherche de nouveaux commentaires sur les posts de ${myUsername}...`);
    const myPosts = await r.getMe().getSubmissions({ limit: 100 });

    for (const post of myPosts) {
        const comments = await post.expandReplies({ depth: 1, limit: 100 });

        for (const comment of comments.comments) {
            if (!comment) continue;

            // üî¥ Ne traite pas les commentaires en √©chec
            if (failedCommentIds.has(comment.id)) continue;

            // üî∏ Ne traite que les commentaires post√©s apr√®s le lancement du bot
            const commentDate = new Date(comment.created_utc * 1000);
            if (commentDate < dateActu) continue;

            const alreadyReplied = await hasAlreadyReplied(comment, myUsername);
            if (alreadyReplied) continue;

            console.log(`üì¨ Nouveau commentaire trouv√© : ${comment.body}`);
            await replyComment(comment, PUBLIC_REPLY);
            await sendPrivateMessage(comment.author.name, 'Un petit message pour toi', privateMessage);
        }
    }
}
async function processInboxMessages() {
    const messages = await r.getInbox({ filter: 'messages', limit: 50 });

    for (const msg of messages) {
        if (
            msg.body &&
            msg.body.toLowerCase().includes('done') &&
            !msg.was_comment &&
            !msg.replies // V√©rifie que tu n‚Äôas pas d√©j√† r√©pondu
        ) {
            console.log(`üì• Message "done" re√ßu de ${msg.author.name}`);
            await sendPrivateMessage(msg.author.name, 'Merci !', doneReplyPM);
        }
    }
}

async function mainLoop() {
    console.log('üîÑ Ex√©cution de la boucle principale...');

    if (cooldownUntil && Date.now() < cooldownUntil) {
        console.log('‚è≥ En pause √† cause du ratelimit...');
        return;
    }

    try {
        await processPostComments();
        await processInboxMessages();
    } catch (err) {
        console.error(`Erreur dans mainLoop : ${err}`);
    }
}

function setPrivateMessage(msg) {
    privateMessage = msg;
}

function setDoneReplyMessage(msg) {
    doneReplyPM = msg;
}

let intervalId = null;

let dateActu = new Date();

async function startBot() {
    if (intervalId) return;
    intervalId = setInterval(mainLoop, 30000);
    dateActu = new Date();
}

async function stopBot() {
    if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
    }
}

module.exports = {
    startBot,
    stopBot,
    setPrivateMessage,
    setDoneReplyMessage
};